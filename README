This is the cloud-tool, a generic command-line client to any cloud API (though only Amazon support is being developed right now).  The final goal of this tool is to be a comprehensive command-line tool to manage any cloud without having to resort to specialized clients.


== HOW TO INSTALL ==

python setup.py install

as root, will copy the module into your Python installation and the cloud-tool script itself directly into the scripts directory (generally /usr/local/bin, /usr/bin, or C:\Path\to\Python\Scripts).


== HOW TO USE ==

cloud-tool --help

cloud-tool <apiname> --help

cloud-tool <apiname> <commandname> --help

cloud-tool <apiname> <commandname> [ ... parameters of the commandname in apiname ... ]


== REQUIREMENTS ==

This tool requires the boto python library (packaged as python-boto in many Linux distributions)


== HOW IT WORKS / HOW TO DEVELOP AN API ADAPTER ==

The way cloud-tool accomplishes this, is by implementing commands for each API in a separate module, and then using dynamic programming to detect the commands, parse the arguments and options, and feed them to the API implementor.

1,2,3:

1. You create a new module cloudtool.apis.yourapi
2. You implement the API in a class inside that module.  This is called the implementor class.
3. You reference your class in a module-level variable called "implementor"

That's it.  But there are more niceties for you:

a) When cloud-tool runs, the first argument (the API name) maps to the module name that contains the implementor class, and the second argument (the command name) maps to a method name in an instance of the implementor class.

b) The arguments and --options map to positional arguments to your implementor method / implementor __init__.  Specifically, command-line arguments after the command name map to mandatory positional arguments in your implementor method; optional/keyword arguments declared in your __init__ and method map to optional --command-line=options.

c) You can decorate your method with the decorator @describe from the cloudtool.utils module.  @describe('param','A parameter') maps to the help text 'A parameter' for the option '--help' / mandatory argument 'PARAM' that shows up in 'cloud-tool apiname commandname --help'.

d) The methods that implement API commands in your implementor class can have docstrings.  Those docstrings show up in the --help as the help description for the command itself.

e) Optional / keyword args in your implementor's __init__ are valid for all command invocations of your implementor's class.  Optional / keyword args in a specific method that implements a command in your class are only valid for command invocations of that particular command.

f) If a keyword arg in one of your methods has a non-None default value, the default is also shown nicely in the --help text.

g) Underscores in method arguments and module names are automatically and correctly mapped to dashes in the command line, and vice versa, for a consistent experience.  Note that you can use underscores in lieu of dashes for the API and the command name in the command line.

h) Methods that begin with an underscore are intelligently suppressed from the command list produced by 'cloud-tool apiname --help'.

i) Raising TypeError, "error text" in your implemented method will cause the command-line tool to print an usage error "error text".  Rationale: TypeError is automatically raised by Python itself, if the command-line shell for your API function calls your API function with the wrong number of parameters.

This kind of engineering makes for a completely pluggable tool that can be enhanced with practically no effort.

-------------------------------------------------

Here is a very basic example.  The following code:

----------
class AmazonAPI:
    
    @describe("access_key", "Amazon access key")
    @describe("secret_key", "Amazon secret key")
    def __init__(self,
                 access_key=os.environ.get("AWS_ACCESS_KEY_ID",None),
                 secret_key=os.environ.get("AWS_SECRET_ACCESS_KEY",None):
        if not access_key: raise OptionValueError,"you need to specify an access key"
        if not secret_key: raise OptionValueError,"you need to specify a secret key"
        self.__dict__.update(locals())
        
    def list_regions(self,verbose=None):
        """Lists all regions"""
        regions = self._get_regions()
        for r in regions: print r
----------

looks like this to the end-user when invoking help:

----------
$ bin/cloud-tool amazon list-regions --help
Usage: cloud-tool [options...] amazon list_regions

Lists all regions

Options:
  -h, --help            show this help message and exit

  Options for the amazon API:
    --access-key=ACCESS_KEY
                        Amazon access key
    --secret-key=SECRET_KEY
                        Amazon secret key

  Options for the list-regions command:
    --verbose=VERBOSE
                        Print extra output

----------
