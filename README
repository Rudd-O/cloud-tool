This is the cloud-tool, a generic command-line client to any cloud API (though only Amazon support is being developed right now).  The final goal of this tool is to be a comprehensive command-line tool to manage any cloud without having to resort to specialized clients.

The way cloud-tool accomplishes this, is by implementing commands for each API in a separate module, and then using dynamic programming to detect the commands, parse the arguments and options, and feed them to the API implementor.

1,2,3:

1. You create a new module cloud_tool.apis.yourapi
2. You implement the API in a class inside that module.  This is called the implementor class.
3. You reference your class in a module-level variable called "implementor"

That's it.  But there are more niceties for you:

a) When cloud-tool runs, the first argument (the API name) maps to the module name that contains the implementor class, and the second argument (the command name) maps to a method name in an instance of the implementor class.

b) The arguments and --options map to positional arguments to your implementor method / implementor __init__.  Specifically, command-line arguments after the command name map to positional arguments in your implementor method; optional/keyword arguments declared in your __init__ and method map to --command-line=arguments.

c) You can decorate your method with the decorator @describe from the cloud_tool.utils module.  @describe('param','A parameter') is intelligently processed during parameter processing, in such a way that when the user types 'cloud-tool apiname commandname --help', those descriptions appear in the command line options.

d) Optional / keyword args in your implementor's __init__ are valid for all command invocations of your implementor's class.  Optional / keyword args in a specific method that implements a command in your class are only valid for command invocations of that particular command.

e) If a keyword arg in one of your methods has a non-None default value, it is also shown nicely in the --help dump.

f) Underscores in method arguments and module names are automatically and correctly mapped to dashes in the command line, and vice versa, for a consistent experience.  Note that you can use underscores in lieu of dashes for the API and the command name in the command line.

This kind of engineering makes for a completely pluggable tool that can be enhanced with practically no effort.

-------------------------------------------------

Here is a very basic example.  The following code:

----------
class AmazonAPI:
    
    @describe("access_key", "Amazon access key")
    @describe("secret_key", "Amazon secret key")
    def __init__(self,
                 access_key=os.environ.get("AWS_ACCESS_KEY_ID",None),
                 secret_key=os.environ.get("AWS_SECRET_ACCESS_KEY",None):
        if not access_key: raise OptionValueError,"you need to specify an access key"
        if not secret_key: raise OptionValueError,"you need to specify a secret key"
        self.__dict__.update(locals())
        
    def list_regions(self,verbose=None):
        """Lists all regions"""
        regions = self._get_regions()
        for r in regions: print r
----------

looks like this to the end-user when invoking help:

----------
$ bin/cloud-tool amazon list-regions --help
Usage: cloud-tool [options...] amazon list_regions

Lists all regions

Options:
  -h, --help            show this help message and exit

  Options for the amazon API:
    --access-key=ACCESS_KEY
                        Amazon access key
    --secret-key=SECRET_KEY
                        Amazon secret key

  Options for the list-regions command:
    --verbose=VERBOSE
                        Print extra output

----------
